#!/usr/bin/python

import psutil
import socket
import smtplib
import argparse
import pprint
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

pp = pprint.PrettyPrinter(indent=4)
pcts = list()
hostname = socket.gethostname()
default_sender = socket.getfqdn().replace('.', '@', 1)

parser = argparse.ArgumentParser(description="Monitor vital system resources and report at critical threasholds.")
#parser.add_argument('-h', '--help', help="Display this useful message then exits.")
parser.add_argument('-v', '--verbose', dest='verbosity', action='store_true', default=False, help="Displays more verbose output.")
parser.add_argument('-o', '--opmode', dest='opmode', choices=['verbose', 'normal'], default='normal', help="normal or verbose: normal alerts at threashold while verbose alerts at runtime.")
parser.add_argument('--to', dest='mailto', help="to whom alert messages should be sent")
parser.add_argument('--from', dest='mailfrom', default=default_sender, help="the sender of the alerts; if left out, will be calculated from FQDN")
parser.add_argument('-s', '--smtp', dest='smtpserver', help="the smtp server to use (required)")
args = parser.parse_args()

# verbose mode will send a message everytime the script runs
# normal mode will only send messages when threshold is met
opmode = args.opmode

for x in range(5):
	pcts.append(psutil.cpu_percent(interval=1))

avg = sum(pcts) / len(pcts)
mem_pct = psutil.virtual_memory().percent
swap_pct =  psutil.swap_memory().percent
temps = psutil.sensors_temperatures()
fans = psutil.sensors_fans()

print("Average CPU Usage Percent over last 5 seconds: " + str(avg))
print("[Memory Used: " + str(mem_pct) + "%]")
print("[Swap Used: " + str(swap_pct) + "%]")

mailtemps = ''
if temps:
	if temps['coretemp']:
		for t in temps['coretemp']:
			print("[" + t.label + ": " + str(t.current) + "]")
			if mailtemps:
				mailtemps = mailtemps + "[" + t.label + ": " + str(t.current) + "]\n"
			else:
				mailtemps = "[" + t.label + ": " + str(t.current) + "]\n"
	else:
		pp.pprint(temps)
else:
	print("No sensor data for temps.")

if fans:
	pp.pprint(fans)
else:
	print("No sensor data for fans.")

if args.mailto and args.smtpserver:
	me = args.mailfrom
	you = args.mailto or socket.getfqdn().replace('.', '@', 1)

	msg = MIMEMultipart('alternative')
	msg['From'] = me
	msg['To'] = you

	if opmode == 'verbose':
		msg['Subject'] = "CPU Status for " + hostname
		text = "Status:\nAverage CPU Usage Percent over last 5 seconds: " + str(avg) + "\n[Mem: " + str(mem_pct) + "; Swap: " + str(swap_pct) + "]\n"
		if mailtemps:
			text = text + mailtemps + "\n"
		html = """\
<html>
	<head><title>CPU Status for %(hostname)s</title></head>
	<body>
		<h1>Status</h1>
		<p>Average CPU Usage Percent over last 5 seconds: %(avg)s</p>
		<p>[Mem Used: %(mem_pct)s%%; Swap Used: %(swap_pct)s%%]</p>
		<p>%(mailtemps)s</p>
	</body>
</html>
""" % locals()
	elif opmode == 'normal':
		msg['Subject'] = "CPU Warning for " + hostname
		text = "WARNING:\nAverage CPU Usage Percent over the last 5 seconds: " + str(avg) + "\nMem: " + str(mem_pct) + "; Swap: " + str(swap_pct) + "]\n"
		if mailtemps:
			text = text + mailtemps + "\n"
		html = """\
<html>
	<head><title>CPU Status for %(hostname)s</title><head>
	<body>
		<h1>WARNING!</h1>
		<p>Average CPU Usage Percent over last 5 seconds: %(avg)s</p>
		<p>[Mem Used: %(mem_pct)s%%; Swap Used: %(swap_pct)s%%]</p>
		<p>%{mailtemps}s</p>
	</body>
</html>
""" % locals()

	part1 = MIMEText(text, 'plain')
	part2 = MIMEText(html, 'html')

	msg.attach(part1)
	msg.attach(part2)

	if opmode == 'verbose' or (opmode == 'normal' and avg >= 30.0):
		s = smtplib.SMTP(args.smtpserver)
		s.sendmail(me, you, msg.as_string())
		s.quit()

else:
	print("Recipient and mail server not supplied.  Skipping mail notice.")
