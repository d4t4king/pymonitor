#!/usr/bin/python

import psutil
import socket
import smtplib
import argparse
import pprint
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from termcolor import colored,cprint

pp = pprint.PrettyPrinter(indent=4)
pcts = list()
hostname = socket.gethostname()
default_sender = socket.getfqdn().replace('.', '@', 1)
coloron = True

parser = argparse.ArgumentParser(description="Monitor vital system resources and report at critical threasholds.")
#parser.add_argument('-h', '--help', help="Display this useful message then exits.")
parser.add_argument('-v', '--verbose', dest='verbosity', action='store_true', default=False, help="Displays more verbose output.")
parser.add_argument('-o', '--opmode', dest='opmode', choices=['verbose', 'normal'], default='normal', help="normal or verbose: normal alerts at threashold while verbose alerts at runtime.")
parser.add_argument('--to', dest='mailto', help="to whom alert messages should be sent")
parser.add_argument('--from', dest='mailfrom', default=default_sender, help="the sender of the alerts; if left out, will be calculated from FQDN")
parser.add_argument('-nc', '--no-color', dest='coloron', action='store_false', default=True, help="Turns off printing in color")
parser.add_argument('-s', '--smtp', dest='smtpserver', help="the smtp server to use (required)")
args = parser.parse_args()

# sets the color on or off dependent upon the command line options used
# default is to show color
coloron = args.coloron

# handle printing to screen
# determines if color is enabled or not
def print_c(msg, color):
	if coloron:
		cprint(msg, color)
	else:
		print(msg)

# verbose mode will send a message everytime the script runs
# normal mode will only send messages when threshold is met
opmode = args.opmode

alertcondition = { 'cpu' : False, 'mem' : False, 'swap' : False, 'fs' : False, 'temp' : False }

for x in range(5):
	pcts.append(psutil.cpu_percent(interval=1))

avg = sum(pcts) / len(pcts)
mem_pct = psutil.virtual_memory().percent
swap_pct = psutil.swap_memory().percent
temps = psutil.sensors_temperatures()
fans = psutil.sensors_fans()
fsen = {}
for p in psutil.disk_partitions():
	fsen[p.mountpoint] = psutil.disk_usage(p.mountpoint).percent

print_c('CPU: ', 'green')

if avg >= 90.0:
	print_c("Average CPU Usage Percent over last 5 seconds: " + str(avg), 'red')
	alertcondition['cpu'] = True
elif avg < 90.0 and avg >= 75.0:
	print_c("Average CPU Usage Percent over last 5 seconds: " + str(avg), 'magenta')
elif avg < 75.0 and avg >= 50.0:
	print_c("Average CPU Usage Percent over last 5 seconds: " + str(avg), 'yellow')
else:
	print("Average CPU Usage Percent over last 5 seconds: " + str(avg))

print_c("Memory: ", "green")
if mem_pct >= 90.0:
	print_c("[Memory Used: " + str(mem_pct) + "%]", 'red')
	alertcondition['mem'] = True
elif mem_pct < 90.0 and mem_pct >= 75.0:
	print_c("[Memory Used: " + str(mem_pct) + "%]", 'magenta')
elif mem_pct < 75.0 and mem_pct >= 50.0:
	print_c("[Memory Used: " + str(mem_pct) + "%]", 'yellow')
else:
	print("[Memory Used: " + str(mem_pct) + "%]")

print_c("Swap: ", "green")
if swap_pct >= 90.0:
	print_c("[Swap Used: " + str(swap_pct) + "%]", 'red')
	alertcondition['swap'] = True
elif swap_pct < 90.0 and swap_pct >= 75.0:
	print_c("[Swap Used: " + str(swap_pct) + "%]", 'magenta')
elif swap_pct < 75.0 and swap_pct >= 50.0:
	print_c("[Swap Used: " + str(swap_pct) + "%]", 'yellow')
else:
	print("[Swap Used: " + str(swap_pct) + "%]")

mailfsen = ''
print_c("Filesystems: ", "green")
for p in sorted(fsen):
	if fsen[p] >= 90.0:
		print_c("[{0:<8s}: {1:>3.2f}%]".format(p, fsen[p]), "red")
		alertcondition['fs'] = True
	elif fsen[p] < 90.0 and fsen[p] >= 75.0:
		print_c("[{0:<8s}: {1:>3.2f}%]".format(p, fsen[p]), "magenta")
	elif fsen[p] < 75.0 and fsen[p] >= 50.0:
		print_c("[{0:<8s}: {1:>3.2f}%]".format(p, fsen[p]), "yellow")
	else:
		print("[{0:<8s}: {1:>3.2f}%]".format(p, fsen[p]))

	if mailfsen:
		mailfsen += "[" + p + ": " + str(fsen[p]) + "]\n"
	else:
		mailfsen = "[" + p + ": " + str(fsen[p]) + "]\n"

mailtemps = ''
print_c("Temp Sensors: ", "green")
if temps:
	if temps['coretemp']:
		for t in temps['coretemp']:
			if t.current > 70.0:
				alertcondition['temp'] = True
				print_c("[" + t.label + ": " + str(t.current) + "]", 'red')
			elif t.current < 70.0 and t.current >= 60.0:
				print_c("[" + t.label + ": " + str(t.current) + "]", 'yellow')
			elif t.current < 60.0 and t.current >= 45.0:
				print_c("[" + t.label + ": " + str(t.current) + "]", 'yellow')
			else:
				print("[" + t.label + ": " + str(t.current) + "]")

			if mailtemps:
				mailtemps = mailtemps + "[" + t.label + ": " + str(t.current) + "]\n"
			else:
				mailtemps = "[" + t.label + ": " + str(t.current) + "]\n"
	elif temps['applesmc']:
		for t in temps['applesmc']:
			print("[" + t.label + ": " + str(t.current) + "]")
	else:
		pp.pprint(temps)
else:
	print("No sensor data for temps.")

mailfans = ''
print_c("Fan Sensors: ", "green")
if fans:
	if 'applesmc' in fans:
		for f in fans['applesmc']:
			print("[" + f.label + ": " + str(f.current) + "]")
	elif 'thinkpad' in fans:
		for f in fans['thinkpad']:
			print("[" + f.label + ": " + str(f.current) + "]")
	else:
		pp.pprint(fans)
else:
	print("No sensor data for fans.")

alertstr = "Alert: "
for ac in alertcondition:
	if alertcondition[ac]:
#if any(alertcondition[ac] == True for ac in alertcondition):
		print("Alert condition met for " + ac + "!!!")
		alertstr += ac + " "
alertstr = "\n"

##########
# mail section
#########
# if to and server are set
# 	if alertcondition is met and opmode is normal (or alert(?))
#		for each alertcondition
#			append trigger to message
# 	else if opmode is verbose
#		send canned message
# else
# 	print to screen and report no mail info
if args.mailto and args.smtpserver:
	me = args.mailfrom
	you = args.mailto or socket.getfqdn().replace('.', '@', 1)

	msg = MIMEMultipart('alternative')
	msg['From'] = me
	msg['To'] = you

	if opmode == 'verbose':
		msg['Subject'] = "System Status for " + hostname
		text = "Status:\nAverage CPU usage percent over last 5 seconds: " + str(avg) + "\n[Mem: " + str(mem_pct) + "; Swap: " + str(swap_pct) + "]\n"
		if mailtemps:
			text += mailtemps + "\n"
		if mailfsen:
			text += mailfsen

		html = """\
<html>
	<head><title>CPU Status for %(hostname)s</title></head>
	<body>
		<h1>Status</h1>
		<p>Average CPU usage percent over last 5 seconds: %(avg)s</p>
		<p>[Mem Used: %(mem_pct)s%%; Swap Used: %(swap_pct)s%%]</p>
		<p>%(mailtemps)s</p>
		<p>%(mailfsen)s</p>
	</body>
</html>
""" % locals()
	elif opmode == 'normal':
		msg['Subject'] = "System Warning for " + hostname
		text = "Average CPU usage percent over the last 5 seconds: " + str(avg) + "\nMem: " + str(mem_pct) + "; Swap: " + str(swap_pct) + "]\n"
		if alertstr:
			text += alertstr
		if mailtemps:
			text += mailtemps + "\n"
		if mailfsen: 
			text += mailfsen

		html = """\
<html>
	<head><title>CPU Status for %(hostname)s</title><head>
	<body>
		<h1>WARNING!</h1>
		<h2>Alert condition(s) met!</h2>
		<h3>%(alertstr)s</h3>
		<p>Average CPU Usage Percent over last 5 seconds: %(avg)s</p>
		<p>[Mem Used: %(mem_pct)s%%; Swap Used: %(swap_pct)s%%]</p>
		<p>%(mailtemps)s</p>
		<p>%(mailfsen)s</p>
	</body>
</html>
""" % locals()

	part1 = MIMEText(text, 'plain')
	part2 = MIMEText(html, 'html')

	msg.attach(part1)
	msg.attach(part2)
	
	if opmode == 'verbose' or (opmode == 'normal' and any(alertcondition[a] == True for a in alertcondition)):
		s = smtplib.SMTP(args.smtpserver)
		s.sendmail(me, you, msg.as_string())
		s.quit()

else:
	print("Recipient and mail server not supplied.  Skipping mail notice.")
